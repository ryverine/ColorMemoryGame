{"version":3,"sources":["components/ColorCard/index.js","components/Wrapper/index.js","components/Score/index.js","components/GameOver/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["ColorCard","props","class","src","image","id","onClick","colorPicked","alt","Wrapper","className","children","Score","type","disabled","GameOver","title","score","messageText","startGame","Title","Subtitle","App","state","pickedColors","gameOver","colors","shuffleColorCards","curCards","newCards","length","testCard","Math","floor","random","foundCard","i","push","tmpPickedColors","tmpScore","includes","setState","shuffledColorCards","console","log","this","Fragment","map","color","key","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de82edb7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ColorCard(props) {\n  return (\n   \n      <div class=\"imgContainer\">\n        <img src={props.image} id={props.id} onClick={() => props.colorPicked(props.id)} alt=\"\" />\n      </div>\n\n  );\n}\n\nexport default ColorCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n// have button change color as score increases\r\n\r\nfunction Score(props) {\r\n  return (\r\n    <div class=\"scoreBoard\">\r\n        <button type=\"button\" class=\"btn btn-primary\" disabled>\r\n        Score: <span class=\"badge badge-light\">{props.children}</span>\r\n        </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport Score from \"../Score\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction GameOver(props) {\r\n  return (\r\n    <div class=\"card\">\r\n        <img src={props.image} class=\"card-img-top\" alt=\"game over\"/>\r\n        <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{props.title}</h5>\r\n            <Score>{props.score}</Score>\r\n            <p class=\"card-text\">{props.messageText}</p>\r\n            <button class=\"btn btn-success\" onClick={()=>props.startGame()}>Play Again</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOver;","import React from \"react\";\nimport \"./style.css\";\n\nexport function Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport function Subtitle(props){\n  return <h3 className=\"subtitle\">{props.children}</h3>;\n}\n\n","import React, { Component } from \"react\";\nimport ColorCard from \"./components/ColorCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport GameOver from \"./components/GameOver\";\nimport {Title, Subtitle} from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport colors from \"./colors.json\";\n\nclass App extends Component {\n  state = {\n    pickedColors: [],\n    score: 0,\n    gameOver: false,\n    colors \n  };\n\n  shuffleColorCards = () =>{\n    let curCards = this.state.colors;\n    let newCards = [];\n \n    while (newCards.length < 20)\n    {\n      var curCardIndex = Math.floor(Math.random()*curCards.length);\n      var testCard = curCards[curCardIndex];\n      var foundCard = false;\n      for (var i = 0; i < newCards.length; i++)\n      {\n        if(testCard.id === newCards[i].id)\n        {\n          foundCard = true;\n          break;\n        }\n      }\n\n      if(!foundCard)\n      {\n        newCards.push(testCard);\n      }\n    }\n\n    return newCards;\n  }\n  \n  colorPicked = id => {\n    const tmpPickedColors = this.state.pickedColors;\n    let tmpScore = this.state.score;\n    \n    if(tmpPickedColors.includes(id))\n    {\n      this.setState({gameOver: true});\n    }\n    else\n    {\n      tmpPickedColors.push(id);\n      tmpScore++;\n      this.setState({ \n        pickedColors: tmpPickedColors,\n        score: tmpScore\n      });\n\n    }\n    \n    var shuffledColorCards = this.shuffleColorCards();\n\n    this.setState({ colors: shuffledColorCards });\n\n  };\n\n  startGame = () => {\n    console.log(\"START GAME\");\n\n    var colorList = [];\n    var userScore = 0;\n    var isGameOver = false;\n    var shuffledColorCards = this.shuffleColorCards();\n\n    this.setState({ \n      pickedColors: colorList,\n      score: userScore,\n      gameOver: isGameOver,\n      colors: shuffledColorCards });\n  };\n\n  render() {\n    if (this.state.gameOver)\n    {\n      return(\n        <Wrapper>\n          <Title>Color Memory Clicky Game</Title>\n          <GameOver \n            title=\"GAME OVER!\" \n            messageText=\"Maybe next time, chief!\" \n            image=\"images/img_you_lose.png\"\n            score={this.state.score}\n            startGame={this.startGame} /> \n        </Wrapper>\n      );\n    }\n    else\n    {\n      if (this.state.score >= 20)\n      {\n        return(\n          <Wrapper>\n            <Title>Color Memory Clicky Game</Title>\n            <GameOver \n              title=\"YOU WON\" \n              messageText=\"You did so good!\" \n              image=\"images/img_you_won.png\"\n              score={this.state.score}\n              startGame={this.startGame} /> \n          </Wrapper>\n        );\n      }\n      else\n      {\n        return (\n          <React.Fragment>\n            <Title>Color Memory Clicky Game</Title>\n            <Subtitle>Try to pick each color only once!</Subtitle>\n            <Score>{this.state.score}</Score>\n            <Wrapper>\n            {this.state.colors.map(color => (\n              <ColorCard\n                colorPicked={this.colorPicked}\n                key={color.id}\n                id={color.id}\n                name={color.name}\n                image={color.image}\n              />\n            ))}\n          </Wrapper>\n          </React.Fragment>\n        );\n      }\n    }\n  }\n\n}\n\nexport default App;\n\n\n/*\nDefault create-react-app\n\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}